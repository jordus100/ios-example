"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _support = require("@appium/support");
var _teen_process = require("teen_process");
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-14"));
class SimulatorXcode15 extends _simulatorXcode.default {
  async _fetchSystemAppBundleIds() {
    if (this._systemAppBundleIds) {
      return this._systemAppBundleIds;
    }
    const appsRoot = _path.default.resolve(_lodash.default.trim(await this.simctl.getEnv('IPHONE_SIMULATOR_ROOT')), 'Applications');
    const fetchBundleId = async appRoot => {
      const infoPlistPath = _path.default.resolve(appRoot, 'Info.plist');
      if (!(await _support.fs.exists(infoPlistPath))) {
        return '';
      }
      const {
        stdout
      } = await (0, _teen_process.exec)('/usr/libexec/PlistBuddy', ['-c', 'print CFBundleIdentifier', infoPlistPath]);
      return _lodash.default.trim(stdout);
    };
    const allApps = (await _support.fs.readdir(appsRoot)).filter(x => x.endsWith('.app')).map(x => _path.default.join(appsRoot, x));
    this._systemAppBundleIds = new Set(await _bluebird.default.all(allApps.map(fetchBundleId)));
    return this._systemAppBundleIds;
  }
  async isAppInstalled(bundleId) {
    try {
      const appContainer = await this.simctl.getAppContainer(bundleId);
      if (!appContainer.endsWith('.app')) {
        return false;
      }
      return await _support.fs.exists(appContainer);
    } catch (err) {
      return (await this._fetchSystemAppBundleIds()).has(bundleId);
    }
  }
  async getLaunchDaemonsRoot() {
    return _path.default.resolve(_lodash.default.trim(await this.simctl.getEnv('IPHONE_SIMULATOR_ROOT')), 'System/Library/LaunchDaemons');
  }
}
var _default = SimulatorXcode15;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3VwcG9ydCIsInJlcXVpcmUiLCJfdGVlbl9wcm9jZXNzIiwiX3BhdGgiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2xvZGFzaCIsIl9ibHVlYmlyZCIsIl9zaW11bGF0b3JYY29kZSIsIlNpbXVsYXRvclhjb2RlMTUiLCJTaW11bGF0b3JYY29kZTE0IiwiX2ZldGNoU3lzdGVtQXBwQnVuZGxlSWRzIiwiX3N5c3RlbUFwcEJ1bmRsZUlkcyIsImFwcHNSb290IiwicGF0aCIsInJlc29sdmUiLCJfIiwidHJpbSIsInNpbWN0bCIsImdldEVudiIsImZldGNoQnVuZGxlSWQiLCJhcHBSb290IiwiaW5mb1BsaXN0UGF0aCIsImZzIiwiZXhpc3RzIiwic3Rkb3V0IiwiZXhlYyIsImFsbEFwcHMiLCJyZWFkZGlyIiwiZmlsdGVyIiwieCIsImVuZHNXaXRoIiwibWFwIiwiam9pbiIsIlNldCIsIkIiLCJhbGwiLCJpc0FwcEluc3RhbGxlZCIsImJ1bmRsZUlkIiwiYXBwQ29udGFpbmVyIiwiZ2V0QXBwQ29udGFpbmVyIiwiZXJyIiwiaGFzIiwiZ2V0TGF1bmNoRGFlbW9uc1Jvb3QiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vbGliL3NpbXVsYXRvci14Y29kZS0xNS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcyB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBTaW11bGF0b3JYY29kZTE0IGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTE0JztcblxuY2xhc3MgU2ltdWxhdG9yWGNvZGUxNSBleHRlbmRzIFNpbXVsYXRvclhjb2RlMTQge1xuICAvKipcbiAgICogQ29sbGVjdHMgYW5kIGNhY2hlcyBidW5kbGUgaW5kZXRpZmllciBvZiBzeXN0ZW0gU2ltdWxhdG9yIGFwcHNcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8U2V0PHN0cmluZz4+fVxuICAgKi9cbiAgYXN5bmMgX2ZldGNoU3lzdGVtQXBwQnVuZGxlSWRzICgpIHtcbiAgICBpZiAodGhpcy5fc3lzdGVtQXBwQnVuZGxlSWRzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3lzdGVtQXBwQnVuZGxlSWRzO1xuICAgIH1cblxuICAgIGNvbnN0IGFwcHNSb290ID0gcGF0aC5yZXNvbHZlKF8udHJpbShhd2FpdCB0aGlzLnNpbWN0bC5nZXRFbnYoJ0lQSE9ORV9TSU1VTEFUT1JfUk9PVCcpKSwgJ0FwcGxpY2F0aW9ucycpO1xuICAgIGNvbnN0IGZldGNoQnVuZGxlSWQgPSBhc3luYyAoYXBwUm9vdCkgPT4ge1xuICAgICAgY29uc3QgaW5mb1BsaXN0UGF0aCA9IHBhdGgucmVzb2x2ZShhcHBSb290LCAnSW5mby5wbGlzdCcpO1xuICAgICAgaWYgKCEoYXdhaXQgZnMuZXhpc3RzKGluZm9QbGlzdFBhdGgpKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJy91c3IvbGliZXhlYy9QbGlzdEJ1ZGR5JywgW1xuICAgICAgICAnLWMnLCAncHJpbnQgQ0ZCdW5kbGVJZGVudGlmaWVyJywgaW5mb1BsaXN0UGF0aFxuICAgICAgXSk7XG4gICAgICByZXR1cm4gXy50cmltKHN0ZG91dCk7XG4gICAgfTtcbiAgICBjb25zdCBhbGxBcHBzID0gKGF3YWl0IGZzLnJlYWRkaXIoYXBwc1Jvb3QpKVxuICAgICAgLmZpbHRlcigoeCkgPT4geC5lbmRzV2l0aCgnLmFwcCcpKVxuICAgICAgLm1hcCgoeCkgPT4gcGF0aC5qb2luKGFwcHNSb290LCB4KSk7XG4gICAgdGhpcy5fc3lzdGVtQXBwQnVuZGxlSWRzID0gbmV3IFNldChhd2FpdCBCLmFsbChhbGxBcHBzLm1hcChmZXRjaEJ1bmRsZUlkKSkpO1xuICAgIHJldHVybiB0aGlzLl9zeXN0ZW1BcHBCdW5kbGVJZHM7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZ5IHdoZXRoZXIgdGhlIHBhcnRpY3VsYXIgYXBwbGljYXRpb24gaXMgaW5zdGFsbGVkIG9uIFNpbXVsYXRvci5cbiAgICogQG92ZXJyaWRlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCAtIFRoZSBidW5kbGUgaWQgb2YgdGhlIGFwcGxpY2F0aW9uIHRvIGJlIGNoZWNrZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFRydWUgaWYgdGhlIGdpdmVuIGFwcGxpY2F0aW9uIGlzIGluc3RhbGxlZC5cbiAgICovXG4gIGFzeW5jIGlzQXBwSW5zdGFsbGVkIChidW5kbGVJZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhcHBDb250YWluZXIgPSBhd2FpdCB0aGlzLnNpbWN0bC5nZXRBcHBDb250YWluZXIoYnVuZGxlSWQpO1xuICAgICAgaWYgKCFhcHBDb250YWluZXIuZW5kc1dpdGgoJy5hcHAnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXdhaXQgZnMuZXhpc3RzKGFwcENvbnRhaW5lcik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBnZXRfYXBwX2NvbnRhaW5lciBzdWJjb21tYW5kIGZhaWxzIGZvciBzeXN0ZW0gYXBwbGljYXRpb25zLFxuICAgICAgLy8gYXMgd2VsbCBhcyB0aGUgaGlkZGVuIGFwcGluZm8gY29tbWFuZFxuICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLl9mZXRjaFN5c3RlbUFwcEJ1bmRsZUlkcygpKS5oYXMoYnVuZGxlSWQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQGluaGVyaXRkb2NcbiAgICovXG4gIGFzeW5jIGdldExhdW5jaERhZW1vbnNSb290ICgpIHtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKFxuICAgICAgXy50cmltKGF3YWl0IHRoaXMuc2ltY3RsLmdldEVudignSVBIT05FX1NJTVVMQVRPUl9ST09UJykpLFxuICAgICAgJ1N5c3RlbS9MaWJyYXJ5L0xhdW5jaERhZW1vbnMnXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW11bGF0b3JYY29kZTE1O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUQsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFLLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFNLGVBQUEsR0FBQUgsc0JBQUEsQ0FBQUgsT0FBQTtBQUVBLE1BQU1PLGdCQUFnQixTQUFTQyx1QkFBZ0IsQ0FBQztFQU05QyxNQUFNQyx3QkFBd0JBLENBQUEsRUFBSTtJQUNoQyxJQUFJLElBQUksQ0FBQ0MsbUJBQW1CLEVBQUU7TUFDNUIsT0FBTyxJQUFJLENBQUNBLG1CQUFtQjtJQUNqQztJQUVBLE1BQU1DLFFBQVEsR0FBR0MsYUFBSSxDQUFDQyxPQUFPLENBQUNDLGVBQUMsQ0FBQ0MsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDO0lBQ3hHLE1BQU1DLGFBQWEsR0FBRyxNQUFPQyxPQUFPLElBQUs7TUFDdkMsTUFBTUMsYUFBYSxHQUFHUixhQUFJLENBQUNDLE9BQU8sQ0FBQ00sT0FBTyxFQUFFLFlBQVksQ0FBQztNQUN6RCxJQUFJLEVBQUUsTUFBTUUsV0FBRSxDQUFDQyxNQUFNLENBQUNGLGFBQWEsQ0FBQyxDQUFDLEVBQUU7UUFDckMsT0FBTyxFQUFFO01BQ1g7TUFDQSxNQUFNO1FBQUNHO01BQU0sQ0FBQyxHQUFHLE1BQU0sSUFBQUMsa0JBQUksRUFBQyx5QkFBeUIsRUFBRSxDQUNyRCxJQUFJLEVBQUUsMEJBQTBCLEVBQUVKLGFBQWEsQ0FDaEQsQ0FBQztNQUNGLE9BQU9OLGVBQUMsQ0FBQ0MsSUFBSSxDQUFDUSxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUNELE1BQU1FLE9BQU8sR0FBRyxDQUFDLE1BQU1KLFdBQUUsQ0FBQ0ssT0FBTyxDQUFDZixRQUFRLENBQUMsRUFDeENnQixNQUFNLENBQUVDLENBQUMsSUFBS0EsQ0FBQyxDQUFDQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDakNDLEdBQUcsQ0FBRUYsQ0FBQyxJQUFLaEIsYUFBSSxDQUFDbUIsSUFBSSxDQUFDcEIsUUFBUSxFQUFFaUIsQ0FBQyxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDbEIsbUJBQW1CLEdBQUcsSUFBSXNCLEdBQUcsQ0FBQyxNQUFNQyxpQkFBQyxDQUFDQyxHQUFHLENBQUNULE9BQU8sQ0FBQ0ssR0FBRyxDQUFDWixhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzNFLE9BQU8sSUFBSSxDQUFDUixtQkFBbUI7RUFDakM7RUFTQSxNQUFNeUIsY0FBY0EsQ0FBRUMsUUFBUSxFQUFFO0lBQzlCLElBQUk7TUFDRixNQUFNQyxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUNyQixNQUFNLENBQUNzQixlQUFlLENBQUNGLFFBQVEsQ0FBQztNQUNoRSxJQUFJLENBQUNDLFlBQVksQ0FBQ1IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2xDLE9BQU8sS0FBSztNQUNkO01BQ0EsT0FBTyxNQUFNUixXQUFFLENBQUNDLE1BQU0sQ0FBQ2UsWUFBWSxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxPQUFPRSxHQUFHLEVBQUU7TUFHWixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUM5Qix3QkFBd0IsQ0FBQyxDQUFDLEVBQUUrQixHQUFHLENBQUNKLFFBQVEsQ0FBQztJQUM5RDtFQUNGO0VBTUEsTUFBTUssb0JBQW9CQSxDQUFBLEVBQUk7SUFDNUIsT0FBTzdCLGFBQUksQ0FBQ0MsT0FBTyxDQUNqQkMsZUFBQyxDQUFDQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUMsRUFDekQsOEJBQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFBQyxJQUFBeUIsUUFBQSxHQUVjbkMsZ0JBQWdCO0FBQUFvQyxPQUFBLENBQUFDLE9BQUEsR0FBQUYsUUFBQSJ9